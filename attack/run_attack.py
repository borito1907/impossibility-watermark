from watermarker_factory import get_default_watermarker
from mutators.sentence import SentenceMutator
from mutators.span import SpanMutator
from mutators.word import WordMutator
from mutators.document_1step import DocumentMutator_1step
from mutators.document_2step import DocumentMutator_2step
from oracles import (
    SoloOracle, RankOracle, JointOracle, RelativeOracle,
    PrometheusAbsoluteOracle, PrometheusRelativeOracle, 
    BinaryOracle, MutationOracle, Mutation1Oracle, ExampleOracle, DiffOracle,
    ArmoRMOracle, InternLMOracle, OffsetBiasOracle
)
from attack.attack import Attack

import hydra
import logging

logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger(__name__)
logging.getLogger('optimum.gptq.quantizer').setLevel(logging.WARNING)

mutators = {
    "SentenceMutator": SentenceMutator,
    "SpanMutator": SpanMutator,
    "WordMutator": WordMutator,
    "DocumentMutator_1step": DocumentMutator_1step,
    "DocumentMutator_2step": DocumentMutator_2step
}

oracles = {
    "SoloOracle": SoloOracle,
    "RankOracle": RankOracle,
    "JointOracle": JointOracle,
    "RelativeOracle": RelativeOracle,
    "PrometheusAbsoluteOracle": PrometheusAbsoluteOracle,
    "PrometheusRelativeOracle": PrometheusRelativeOracle,
    "BinaryOracle": BinaryOracle,
    "MutationOracle": MutationOracle,
    "Mutation1Oracle": Mutation1Oracle,
    "ExampleOracle": ExampleOracle,
    "DiffOracle": DiffOracle,
    "ArmoRMOracle": ArmoRMOracle,
    "InternLMOracle": InternLMOracle,
    "OffsetBiasOracle": OffsetBiasOracle
}

@hydra.main(version_base=None, config_path="../conf", config_name="attack")
def main(cfg):
    watermarker = get_default_watermarker(cfg.watermarker)

    mutator = mutators[cfg.mutator_type]()
    oracle = oracles[cfg.oracle_type]()

    attacker = Attack(cfg, watermarker, mutator, oracle)

    prompt = """What is Kolmogorov 0-1 law?"""

    watermarked_text = """An exciting math-related inquiry! The Kolmohgorova 0−1-law, not Kolmohgorova (I assume it was just an error) but rather Kolmohgorova should be spelled as Kolmohgorova doesn't make sense here. It's called Kolmogorov's zero−one-infinity Law.

The Kolmogorov's 0-1 law, which applies to a particular class of tail σ-algebras, asserts that the probability of such events will either be 0 or 100%. 

To provide further information, I'll give a brief description:

This concept was first proposed by Russian mathematician Andrei Kolmogorov in 1943 and later generalized by other researchers.

A tail σ-algebra, essentially, is generated by a collection of sequences where two sequences are identified if they eventually agree.

A tail event, then, depends on what happens 'at' the tail of these sequences. To illustrate: imagine tossing coins one at a time and looking for heads, tails or any pattern - a tail σ-algebra contains sets like 'the coin comes up tails after some point.' 

So, according to this rule, when we're trying to calculate the chances of a tail event, we can never assign a value between 0 and 100%, except possibly 0 and 100% themselves.

However, keep in mind there might still exist cases with 50% chance, yet such cases are extremely rare.

Now, does this explanation help clarify things? Or perhaps I could provide another example? Just let me know!"""

    attacked_text = attacker.attack(prompt, watermarked_text)

    log.info(f"Attacked Text: {attacked_text}")

if __name__ == "__main__":
    main()
