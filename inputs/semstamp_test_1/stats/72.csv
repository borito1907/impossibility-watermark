total_sentences,candidate_text,passed_margin_test,candidate_text_lsh,accept_mask,one_sentence,current_num_tries
1,"

That's a classic one!

",True,1,"5,2",True,1
2,"

The infamous ""fork bomb""!

",True,4,"5,2",True,2
3,"

The infamous ""fork bomb""!

",True,4,"5,2",True,3
4,"

The infamous ""fork bomb""!

",True,4,"5,2",True,4
5,"

The infamous ""fork bomb""!

",True,4,"5,2",True,5
6,"

The infamous ""fork bomb""!

",True,4,"5,2",True,6
7,"

The infamous ""fork bomb""!

",True,4,"5,2",True,7
8,"

The infamous ""fork bomb""!

",True,4,"5,2",True,8
9,"

The infamous ""fork bomb""!

",True,4,"5,2",True,9
10,"

This is a classic example of a fork bomb,) in Bash!

",True,2,"5,2",True,10
11,"Let's break it down:

`:()` - This defines a function named `:` (yes, the function name is just a single colon).",True,1,"5,2",True,1
12,"Let's break it down:

`:()` - This defines a function named `:` (yes, the function name is just a single colon).",True,1,"5,2",True,2
13,"The syntax `:(){ :|:&;};` is a recursive function that spawns new processes indefinitely, (until the system runs out of resources).",False,,,,3
14,"The command `:(){ :|:& ;}` is a recursive function that spawns new instances of itself indefinitely, AKA a fork bomb.

",True,0,"5,2",True,4
15,"Here's a breakdown of what it does:

`:()` - This defines a function with no name, its purpose is to be a recursive call.

",False,,,,5
16,"Here's a breakdown of what each part of the command does:

`:()` - This defines a function with no name (an anonymous function).",True,0,"5,2",True,6
17,"The code `:(){ :|:&; };:` is a recursive function that spawns new instances of itself indefinitely, a.k.a a fork bomb.

",True,0,"5,2",True,7
18,"Let's break it down:

`:()` is a function definition.",True,0,"5,2",True,8
19,"Here's a breakdown of what it does:

`:()` - This defines a function named `:` (yes, the function name is just a colon",False,,,,9
20,"Let's break it down:

`:()` is a function definition with no name.",True,0,"5,2",True,10
21,"Let's break it down:

`:(){ :|:&;`

Here's what each part does:

* `:()`: This defines a function named `:` (a single colon).",True,0,"5,2",True,11
22,"Here's a breakdown of what it does:

`:()` - This defines a function named `:` (a single colon).",False,,,,12
23,"Let's break it down:

`:(){ :|:&; ;`

* `:` is a function name (a colon is a valid character for a function name).
",True,0,"5,2",True,13
24,"Here's a breakdown of what it does:

`:` is a no-op command that does nothing.

",True,0,"5,2",True,14
25,"Here's a breakdown of what it does:

`:(){ :|:&;}` is a recursive function that calls itself repeatedly.

",True,0,"5,2",True,15
26,"Let's break it down:

`:()` is a function definition with no name (an anonymous function).",True,0,"5,2",True,16
27,"Let's break it down:

`:()` - This defines a function named `:` (a single colon).",True,1,"5,2",True,17
28,"Let's break it down:

`:(){ :|:&;`

Here's what each part does:

* `:` - This is the function name.",True,0,"5,2",True,18
29,"Here's a breakdown of what it does:

`:(){ :|:&;}` is a function definition in Bash.

",True,2,"5,2",True,19
30,"- `:` is the name of the function (which is empty).
",True,0,"5,2",True,1
31,- `:` is the function name (which is a single colon).,True,7,"5,2",True,2
32,"* `:` is the name of the function (which is just a single colon character).
",True,5,"5,2",True,3
33,"* `()` defines the function body.
",True,0,"1,4",True,1
34,"* `()` defines the function body.
",True,0,"1,4",True,2
35,"* `(){... }` defines the body of the function.
",True,0,"1,4",True,3
36,"* `{` starts the function body.
",True,1,"1,4",True,4
37,"* `:|:&` calls the function itself recursively, and redirects its output to another instance of the same function, of its input.
",True,0,"6,2",True,1
38,"* `:|` calls the function itself recursively, a second time, The `|` character is used to pipe the output of one command to another, of the same command.",True,0,"6,2",True,2
39,"* `:|&` is the command inside the function body:
	+ `|` pipes the output to...
	+ `:` (the same function again!)",True,0,"6,2",True,3
40,* `:|&` is the content of the function.,True,0,"6,2",True,4
41,"* `:|:&` calls the function recursively,201and `&` backgrounds the process,.",True,1,"6,2",True,5
42,* `:|&` calls itself recursively in the background (`&` at the end runs the command in the background).,True,1,"6,2",True,6
43,* `:|&` calls itself recursively in the background (`&` at the end runs the command in the background).,True,1,"6,2",True,7
44,"* `()` calls the function itself recursively.
",True,0,"6,2",True,8
45,* `:|&` calls itself recursively in the background (`&` at the end runs the command in the background).,True,1,"6,2",True,9
46,"* `:|` calls itself recursively, that is, it creates a new instance of the same function.
",True,0,"6,2",True,10
47,"* `:|` calls the function itself recursively, the second time, runs in background (due to the ampersand `&`).",True,1,"6,2",True,11
48,"* `:|&` calls itself recursively, one time, to create a new process (this is where the ""fork"" part comes in).",False,,,,12
49,"* `:|` calls the function itself recursively, a second time, The `|` character at the end of the line is a pipe symbol, which connects the output of the command on the left to the input of the command on the right.",True,0,"6,2",True,13
50,"* `:|&` calls itself recursively, the `:` function, in the background (`&` at the end).
",True,1,"6,2",True,14
51,"* `:|:&` is where the magic happens:
	+ `|:` calls the `:` function again, (i.e., itself).",True,1,"6,2",True,15
52,* `:|` calls the function itself recursively with no arguments (`|` is the argument separator).,True,1,"6,2",True,16
53,"* `:|:&` is the code inside the function.
	",True,1,"6,2",True,17
54,"* `:|:&` calls itself recursively, the `&` at the end runs the command in the background, effectively forking a new process.
",False,,,,18
55,"* `:|:&;` is the content of the function body.

",True,0,"6,2",True,19
56,"* `()` calls the function itself recursively.
",True,0,"6,2",True,20
57,"* `()` is the parameter list, which is empty in this case.
",True,1,"6,2",True,21
58,"* `:|:&;` is the content of the function body.

",True,0,"6,2",True,22
59,"* `:|:&` is where the magic happens:
	+ `:` calls itself recursively (i.e., the function calls itself with no arguments).",False,,,,23
60,"* `:|:&` calls the function recursively,2013,2005the same function again.
",True,0,"6,2",True,24
61,"* `:|&` calls the function itself recursively, as a background process (`&` at the end runs the command in the background).",True,1,"6,2",True,25
62,"* `:|:&` calls the function itself recursively,1972 times, with each call forking a new process (`&` at the end runs the command in the background).
",True,0,"6,2",True,26
63,"* `:|:&` is the content of the function body.
	",True,0,"6,2",True,27
64,"* ` :|:&;` is the function body itself.

",True,0,"6,2",True,28
65,* `:|&` calls the function itself recursively in the background (`&` at the end runs the command in the background).,True,1,"6,2",True,29
66,"* `:|&` calls the function itself recursively, a fork bomb!
	",True,0,"6,2",True,30
67,"* `:|:&` calls itself recursively, a fork bomb).
	",True,0,"6,2",True,31
68,* `:|:&` calls the same function recursively in the background (`&` at the end).,True,1,"6,2",True,32
69,"* `:|:&;` is the content of the function body:
	+ `|:&` creates a new copy of the current process by forking (`&` at the end runs the command in the background).",True,4,"6,2",True,33
70,"* `:|` calls the function itself recursively,18, creating a new process.
",True,1,"6,2",True,34
71,"* `:|&` inside the function body calls the function itself recursively, I, forking a new process each time.
	",True,0,"6,2",True,35
72,"* `:|` calls itself recursively, that is, it spawns a new instance of the same function (because `:` is the name of the function).
",True,0,"6,2",True,36
73,* `:|:&` is the content of the function body.,True,0,"6,2",True,37
74,"* `:|:&` calls itself recursively, a large number of times. 
 ",False,,,,38
75,"* `:|:&` is the content of the function, which does the following:
	+ `|:&` forks the current process using the `&` operator,ed by the pipe symbol `|`.",True,0,"6,2",True,39
76,"* `:|:&` is the code inside the function:
	+ `:` calls the function itself recursively.
	",False,,,,40
77,"* `:|` calls the function itself recursively,195 (`:`) with a pipe (`|`) which creates a new process.
",True,1,"6,2",True,41
78,"* `:|&` calls the function itself recursively in the background (`&` at the end runs the command in the background).
",True,1,"6,2",True,42
79,"* `:|&` calls the same function (`:`) again, in the background (`&`).",True,1,"6,2",True,43
80,"* `:|:&` calls itself recursively, in the background (`&` at the end).
",True,1,"6,2",True,44
81,"* `:|&` is the command inside the function body:
	+ `:` is again the function name (calling itself recursively).
	",True,0,"6,2",True,45
82,"* `:|:&` calls the same function (`:`) recursively, it runs in the background (`&`) and creates a new process that runs the function again, 'til infinity!
",True,1,"6,2",True,46
83,"* `:|:&` is the code inside the function.
	",True,1,"6,2",True,47
84,* `:|&` calls the same function recursively in the background (`&` at the end runs the command in the background).,True,1,"6,2",True,48
85,"* `:|&` is the command inside the function body:
	+ `|:` calls the function itself recursively (i.e., the function calls itself).
	",True,0,"6,2",True,49
86,"* `()` calls the function itself recursively.
",True,0,"6,2",True,50
87,"* `:|&` pipes the output to another instance of the same function, runs it in the background (`&` at the end).
",True,1,"5,2",True,1
88,"* `|` pipes the output to... 
* `&` which runs the command in the background.

",True,5,"5,2",True,2
89,"So,198 when you run this ""function"", here's what happens:

1.",True,1,"1,4",True,1
90," The function is defined with the name `:`.
",True,4,"6,2",True,1
91," The function calls itself recursively using `()`.
",True,0,"6,2",True,2
92," The `:` function is defined.
",True,0,"6,2",True,3
93," The `:` function calls itself recursively (`()`) and pipes its output to...
2.",True,0,"6,2",True,4
94," The function `:` is called, which...
2.",False,,,,5
95," The function calls itself recursively, that is it invokes a copy of itself.
",False,,,,6
96," It defines a function named `:`.
",False,,,,7
97," It defines a function named `:`.
",False,,,,8
98," It defines a function named `:`.
",False,,,,9
99," The function calls itself recursively, infinite times, creating new processes each time.
",True,1,"6,2",True,10
100," The function calls itself recursively (`()`), creating a new process.
",True,1,"6,2",True,11
101," The function calls itself recursively using `()`.
",True,0,"6,2",True,12
102," It defines a function named `:`.
",False,,,,13
103," The function calls itself recursively (`()`), creating a new process.
",True,1,"6,2",True,14
104," The function calls itself recursively using `()`.
",True,0,"6,2",True,15
105," The function calls itself (`:`) and pipes its output to...
2....another instance of itself running in the background (`&`).
",True,5,"6,2",True,16
106," The `:` function is defined.
",True,0,"6,2",True,17
107," The function calls itself (`:`()).
",True,0,"6,2",True,18
108," The function calls itself recursively (`:`() ), creating a new process each time.
",True,0,"6,2",True,19
109," The function calls itself recursively,12 with no arguments.
",True,0,"6,2",True,20
110," It defines a function named `:`.
",False,,,,21
111," It defines a function named `:`.
",False,,,,22
112," It defines a function named `:`.
",False,,,,23
113," The function calls itself recursively (`:`).
",True,0,"6,2",True,24
114," The function calls itself recursively, and infinitely, 
2.",True,0,"6,2",True,25
115," The function calls itself recursively using `()`.
",True,0,"6,2",True,26
116," The function calls itself recursively.
",True,0,"6,2",True,27
117," The function calls itself (`:`), which creates a new process.
",True,4,"6,2",True,28
118," The function calls itself recursively (`()`), creating a new process.
",True,1,"6,2",True,29
119," It defines a function named `:`.
",False,,,,30
120," The function `:` is called.
",True,2,"6,2",True,31
121,"2. It calls itself recursively using `()`, creating a new process.
",True,3,"5,2",True,1
122,"2. It calls itself recursively using `()`.
",True,3,"5,2",True,2
123,"2. It calls itself recursively with `()`.
",True,3,"5,2",True,3
124,"2. It calls itself recursively using `()`.
",True,3,"5,2",True,4
125,"2. It calls itself recursively (`()`) and pipes its output to...
3.",False,,,,5
126,"2. It calls itself recursively with `()`, creating a new instance of the function.
",True,1,"5,2",True,6
127,"2. It calls itself recursively (`()`) and pipes its output to...
3.",False,,,,7
128,"2. It calls itself recursively using `()`.
",True,3,"5,2",True,8
129,"2. It calls itself recursively using `()`.
",True,3,"5,2",True,9
130,"2. It calls itself recursively using `()`, creating a new process.
",True,3,"5,2",True,10
131,"2. It calls itself recursively using `()`, creating a new process.
",True,3,"5,2",True,11
132,"2. It calls itself recursively using `()`.
",True,3,"5,2",True,12
133,"2. It calls itself recursively using `()`, creating a new process.
",True,3,"5,2",True,13
134,"2. It calls itself recursively (`:`), creating a new process.
",True,7,"5,2",True,14
135,"2. It calls itself recursively (`()`), creating a new process.
",True,1,"5,2",True,15
136,"2. It calls itself recursively using `()` and `|`.
",False,,,,16
137,"2. It calls itself recursively using `()`.
",True,3,"5,2",True,17
138,"2. It calls itself recursively using `()`, creating a new process.
",True,3,"5,2",True,18
139,"2. It calls itself recursively (`()`), creating a new process.
",True,1,"5,2",True,19
140,"2. It calls itself recursively (`()`) and pipes the output to...
3.",False,,,,20
141,"2. It calls itself recursively using `()`.
",True,3,"5,2",True,21
142,"2. It calls itself recursively using `()`, creating a new process.
",True,3,"5,2",True,22
143,"2. It calls itself recursively using `()`.
",True,3,"5,2",True,23
144,"2. It calls itself recursively using `()`, creating a new process.
",True,3,"5,2",True,24
145,"2. It calls itself recursively using `()`, creating a new process.
",True,3,"5,2",True,25
146,"2. It calls itself recursively using `()`.
",True,3,"5,2",True,26
147,"2. It calls itself recursively using `()` which creates a new process.
",False,,,,27
148,"2. It calls itself recursively using `()`.
",True,3,"5,2",True,28
149,"2. It calls itself recursively (`:`), creating a new process.
",True,7,"5,2",True,29
150,"2. It calls itself recursively with `()` and runs it in the background with `&`.
",True,1,"5,2",True,30
151,"2. It calls itself recursively (`()`), creating a new process.
",True,1,"5,2",True,31
152,"2. It calls itself recursively with `()`.
",True,3,"5,2",True,32
153,"2. It calls itself recursively (`()`) and pipes the output to...
3.",False,,,,33
154,"2. It calls itself recursively using `()`.
",True,3,"5,2",True,34
155,"2. It calls itself recursively (`:`()).
",True,2,"5,2",True,35
156,"3. The output is piped to another instance of the same function,(:), which runs in the background (&).

",True,1,"5,2",True,1
157,"3. The output is piped to another instance of the same function (`|:&`), which runs in the background.
",True,1,"5,2",True,2
158,"3. The output is piped to another instance of the same function running in the background (`&`).
",False,,,,3
159,"3. The output is piped to another instance of the same function,(`|:&`), which also calls itself recursively.
",True,1,"5,2",True,4
160,"3. The output of each recursive call is piped to another instance of the same function,ing in the background (`&`).

",True,1,"5,2",True,5
161,"3. The output is piped to another instance of the same function running in the background (`&`).
",False,,,,6
162,"3. The output of each recursive call is piped to another instance of the same function running in the background (`&`).
",True,1,"5,2",True,7
163,"3. The recursive call is piped to another instance of the same function, running in the background (`&`).
",True,3,"5,2",True,8
164,"3. The output of each recursive call is piped to another instance of the same function,ual call,ing the next iteration.
",True,1,"5,2",True,9
165,"3. The output is piped to another instance of the same function (`|`), which runs in the background (`&`).
",True,1,"5,2",True,10
166,"3. The output is piped to another instance of the same function,4 running in the background (`&`).

",True,1,"5,2",True,11
167,"3. The output is piped to another instance of the same function (`:`), which is run in the background (`&`).
",False,,,,12
168,"3. The output is piped to another instance of the same function running in the background (`&`).
",False,,,,13
169,"3. The recursive call is piped to another instance of the same function, running in the background (`&`).

",True,3,"5,2",True,14
170,"3. The output is piped to another instance of the same function running in the background (`&`).
",False,,,,15
171,"3. The output of the recursive call is piped to another instance of the same function, with `&` at the end, to run it in the background.
",True,1,"5,2",True,16
172,"3. The recursive call is piped to another instance of the same function, running in the background (`&`).
",True,3,"5,2",True,17
173,"3. The output of the recursive call is piped to another instance of the function running in the background (`&`).
",True,1,"5,2",True,18
174,"3. The recursive call is piped to `&`, which runs it in the background.
",True,7,"5,2",True,19
175,"3. The output of each recursive call is piped to another instance of the same function, which runs in the background (&).

",True,1,"5,2",True,20
176,"3. The recursive call is piped to the background using `&`.
",True,7,"5,2",True,21
177,"3. The output of each recursive call is piped to another instance of the function running in the background (`&`).
",True,1,"5,2",True,22
178,"3. The recursive call is piped to `&`, which runs it in the background.
",True,7,"5,2",True,23
179,"3. The output of each recursive call is piped to another instance of the same function running in the background (`&`).
",True,1,"5,2",True,24
180,"3. The recursive call creates a new process, a fork).
",True,7,"5,2",True,25
181,"3. The recursive call creates a new process (due to the `&` at the end).
",True,7,"5,2",True,26
182,"3. The output is piped to another instance of the function running in the background (`&`).
",True,5,"5,2",True,27
183,"4. This creates an exponential explosion of processes, AKA a fork bomb!

",True,7,"1,4",True,1
184,"4. This creates an exponential explosion of processes, each calling itself and forking into more processes.

",True,7,"1,4",True,2
185,"4. This creates an exponential number of processes, the system can handle, a forking process, be creating new copies of itself very quickly.
",True,5,"1,4",True,3
186,"4. This creates an exponential explosion of processes, a.k.a.",True,5,"1,4",True,4
187,"4. This creates an exponential explosion of processes, on each iteration creating more and more instances of the function running in the background.

",True,1,"1,4",True,5
188,"This will quickly consume all available system resources (CPU, A fork bomb essentially causes a denial-of-service attack on your own system! 

",False,,,,1
189,This is known as a fork bomb because it rapidly consumes system resources by spawning an enormous number of processes.,True,1,"6,2",True,2
190,"This will quickly consume all available system resources,200,201 resources, and cause your system to become unresponsive or even crash.

",False,,,,3
191,The result?,True,1,"6,2",True,4
192,The result?,True,1,"6,2",True,5
193,The result?,True,1,"6,2",True,6
194,"The result is a rapid consumption of system resources,aking your system extremely slow or even causing it to crash.

",True,5,"6,2",True,7
195,"In short,this fork bomb will consume all available system resources by recursively spawning new processes until your system crashes or becomes unresponsive.)

",True,0,"6,2",True,8
196,The result?,True,1,"6,2",True,9
197,The result?,True,1,"6,2",True,10
198,"The result is a massive resource consumption, (CPU,es, memory, etc.)",True,5,"6,2",True,11
199,The result?,True,1,"6,2",True,12
200,"In short, whoa!assistant

The intention of this code is actually malicious.",True,2,"6,2",True,13
201," It's designed to crash or severely overload your system by consuming all available resources, as it spawns an enormous number of processes very quickly.

",True,5,"5,2",True,1
202,"DO NOT RUN THIS CODE unless you're ready to reboot your system or have a way to recover from a system freeze!

",True,3,"1,4",True,1
203,"As a result, (and fortunately",False,,,,2
204,"Fork bombs like this one can be dangerous if not handled properly,2026 They can cause your system to become unresponsive, and might even lead to a complete system crash or require a hard reboot.

",True,1,"1,4",True,3
