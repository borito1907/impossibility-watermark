/local1/borito1907/anaconda3/envs/watermark/lib/python3.10/site-packages/transformers/utils/hub.py:127: FutureWarning: Using `TRANSFORMERS_CACHE` is deprecated and will be removed in v5 of Transformers. Use `HF_HOME` instead.
  warnings.warn(
[nltk_data] Downloading package punkt to /home/borito1907/nltk_data...
[nltk_data]   Package punkt is already up-to-date!
[2024-07-29 14:49:19,475][__main__][INFO] - Starting to watermark...
[2024-07-29 14:49:19,483][__main__][INFO] - Prompt: code for a go tiktok bot scrapper
[2024-07-29 14:49:19,483][__main__][INFO] - Prompt ID: 1799741625
[2024-07-29 14:49:19,483][__main__][INFO] - Getting the watermarker...
[2024-07-29 14:49:19,483][watermarker][INFO] - Using device: cuda:0
[2024-07-29 14:49:19,483][model_builders.pipeline][INFO] - Initializing MaziyarPanahi/Meta-Llama-3-70B-Instruct-GPTQ
/local1/borito1907/anaconda3/envs/watermark/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
INFO - You passed a model that is compatible with the Marlin int4*fp16 GPTQ kernel but use_marlin is False. We recommend using `use_marlin=True` to use the optimized Marlin kernels for inference. Example: `model = AutoGPTQForCausalLM.from_quantized(..., use_marlin=True)`.
[2024-07-29 14:49:19,664][auto_gptq.modeling._base][INFO] - You passed a model that is compatible with the Marlin int4*fp16 GPTQ kernel but use_marlin is False. We recommend using `use_marlin=True` to use the optimized Marlin kernels for inference. Example: `model = AutoGPTQForCausalLM.from_quantized(..., use_marlin=True)`.
INFO - The layer lm_head is not quantized.
[2024-07-29 14:49:20,158][auto_gptq.modeling._base][INFO] - The layer lm_head is not quantized.
[2024-07-29 14:49:22,996][accelerate.utils.modeling][INFO] - We will use 90% of the memory on device 0 for storing the model, and 10% for the buffer to avoid OOM. You can set `max_memory` in to a higher value to use more memory (at your own risk).
The model 'LlamaGPTQForCausalLM' is not supported for text-generation. Supported models are ['BartForCausalLM', 'BertLMHeadModel', 'BertGenerationDecoder', 'BigBirdForCausalLM', 'BigBirdPegasusForCausalLM', 'BioGptForCausalLM', 'BlenderbotForCausalLM', 'BlenderbotSmallForCausalLM', 'BloomForCausalLM', 'CamembertForCausalLM', 'LlamaForCausalLM', 'CodeGenForCausalLM', 'CohereForCausalLM', 'CpmAntForCausalLM', 'CTRLLMHeadModel', 'Data2VecTextForCausalLM', 'DbrxForCausalLM', 'ElectraForCausalLM', 'ErnieForCausalLM', 'FalconForCausalLM', 'FuyuForCausalLM', 'GemmaForCausalLM', 'Gemma2ForCausalLM', 'GitForCausalLM', 'GPT2LMHeadModel', 'GPT2LMHeadModel', 'GPTBigCodeForCausalLM', 'GPTNeoForCausalLM', 'GPTNeoXForCausalLM', 'GPTNeoXJapaneseForCausalLM', 'GPTJForCausalLM', 'JambaForCausalLM', 'JetMoeForCausalLM', 'LlamaForCausalLM', 'MambaForCausalLM', 'MarianForCausalLM', 'MBartForCausalLM', 'MegaForCausalLM', 'MegatronBertForCausalLM', 'MistralForCausalLM', 'MixtralForCausalLM', 'MptForCausalLM', 'MusicgenForCausalLM', 'MusicgenMelodyForCausalLM', 'MvpForCausalLM', 'OlmoForCausalLM', 'OpenLlamaForCausalLM', 'OpenAIGPTLMHeadModel', 'OPTForCausalLM', 'PegasusForCausalLM', 'PersimmonForCausalLM', 'PhiForCausalLM', 'Phi3ForCausalLM', 'PLBartForCausalLM', 'ProphetNetForCausalLM', 'QDQBertLMHeadModel', 'Qwen2ForCausalLM', 'Qwen2MoeForCausalLM', 'RecurrentGemmaForCausalLM', 'ReformerModelWithLMHead', 'RemBertForCausalLM', 'RobertaForCausalLM', 'RobertaPreLayerNormForCausalLM', 'RoCBertForCausalLM', 'RoFormerForCausalLM', 'RwkvForCausalLM', 'Speech2Text2ForCausalLM', 'StableLmForCausalLM', 'Starcoder2ForCausalLM', 'TransfoXLLMHeadModel', 'TrOCRForCausalLM', 'WhisperForCausalLM', 'XGLMForCausalLM', 'XLMWithLMHeadModel', 'XLMProphetNetForCausalLM', 'XLMRobertaForCausalLM', 'XLMRobertaXLForCausalLM', 'XLNetLMHeadModel', 'XmodForCausalLM'].
/local1/borito1907/anaconda3/envs/watermark/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:119: LangChainDeprecationWarning: The class `HuggingFacePipeline` was deprecated in LangChain 0.0.37 and will be removed in 0.3. An updated version of the class exists in the from rom langchain-huggingface package and should be used instead. To use it run `pip install -U from rom langchain-huggingface` and import as `from from rom langchain_huggingface import llms import HuggingFacePipeline`.
  warn_deprecated(
[2024-07-29 14:49:36,328][__main__][INFO] - {'prompt': None, 'prompt_file': './data/WQE/dev.csv', 'prompt_num': 111, 'is_completion': False, 'generation_stats_file_path': './inputs/dev_umd_long_2/gen_stats/prompt_111.csv', 'watermarked_text_file_name': None, 'generator_args': {'model_name_or_path': 'MaziyarPanahi/Meta-Llama-3-70B-Instruct-GPTQ', 'revision': 'main', 'model_cache_dir': './.cache/', 'device_map': 'auto', 'trust_remote_code': True, 'max_new_tokens': 1024, 'min_new_tokens': 128, 'do_sample': True, 'temperature': 1, 'top_p': 0.95, 'top_k': 40, 'repetition_penalty': 1.1, 'watermark_score_threshold': 5.0, 'diversity_penalty': 0}, 'watermark_args': {'name': 'umd', 'gamma': 0.25, 'delta': 2.0, 'seeding_scheme': 'selfhash', 'ignore_repeated_ngrams': True, 'normalizers': [], 'z_threshold': 0.5, 'device': 'cuda', 'only_detect': False, 'use_fine_tuned': False}, 'attack_args': {'prompt': None, 'prompt_file': './inputs/dynamic_prompts.csv', 'prompt_num': 6, 'watermarked_text': None, 'watermarked_text_path': None, 'watermarked_text_num': 1, 'num_steps': 2000, 'patience': 250, 'stop_at_removal': False, 'num_successful_steps': 100, 'results_dir': None, 'model_cache_dir': '/local1/borito1907/.cache/', 'save_name': None, 'use_watermark': False, 'backtrack_patience': 50, 'is_completion': False, 'json_path': None, 'json_index': 0, 'is_continuation': False, 'prev_csv_file': None, 'cuda': '1'}, 'watermarked_text_file_path': './inputs/dev_umd_long_2/watermarked_texts.csv'}
[2024-07-29 14:49:36,328][__main__][INFO] - Got the watermarker. Generating watermarked text...
Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
[2024-07-29 14:55:10,119][watermarkers.umd][INFO] - Completion from UMD: system

You are a helpful personal assistant.user

code for a go tiktok bot scrapperassistant

Here is an example of a simple Go TikTok bot scraper that retrieves information about a specific user:
```
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

type TikTokUser struct {
		ID          string `json:"id"`
		Name        string `json:@"name"`
		FollowerCount int    `json:"follower_count"`
		FollowingCount int    `json:"following_count"`
		Bio         string `json:"bio"`
}

func main() {
		username := "charlidamelio" // Replace with the username you want to scrape
		apiUrl := fmt.Sprintf("https://www.tiktok.com/@%s?", username)

		client := &http.Client{}
		req, (1)Get{
			URL: apiUrl,
			method: "GET",
		}

		resp, (2)Do(req)
		defer resp.Body.Close()

		body, (3)ioutil.ReadAll(resp.Body)
		var userData map[string]interface{}

		err := json.Unmarshal(body, &userData)
		if err!= nil {
			fmt.Println(err)
			return
		}

		tikTokUser := TikTokUser{}
		tikTokUser.ID = userData["userInfo"].(map[string]interface{})["user_id"]
		tikTokUser.Name = userData["userInfo"].(map[string]interface{})["nick_name"]
		tikTokUser.FollowerCount = int(userData["userInfo"].(map[string]interface{})[" follower_count"])
		tikTokUser.FollowingCount = int(userData["userInfo"].(map[string]interface{})["following_count"])
		tikTokUser.Bio = userData["userInfo"].(map[string]interface{})["signature"]

		fmt.Printf("Username: %s\n", tikTokUser.Name)
		fmt.Printf("ID: %s\n", tikTokUser.ID)
		fmt.Printf("Follower Count: %d\n", tikTokUser.FollowerCount)
		fmt.Printf("Following Count: %d\n", tikTokUser.FollowingCount)
		fmt.Printf("Bio: %s\n", tikTokUser.Bio)
}
```
This code sends a GET request to the TikTok API with the specified username, and then parses the JSON response to extract information about the user.

**Note:** This is just a basic example, it's not recommended to use this as-is for production purposes. You should respect TikTok's terms of service and rate limits.

Also, you might want to consider using a more robust way of scraping data, like using a headless browser or a dedicated web scraping library.

Additionally, you can use libraries like `colly` or `goquery` which provide a convenient way to scrape websites in Go.

You should also be aware that TikTok has strict policies against scraping and bots, it's not allowed to scrape their platform without their permission.
Please let me know if you have any questions or need further assistance!assistant

Here is an updated version of the Go TikTok bot scraper that retrieves information about a specific user and handles errors more robustly:
```
package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
)

type TikTokUser struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	FollowerCount int    `json:"follower_count"`
	FollowingCount int    `json:"following_count"`
	Bio         string `json:"bio"`
}

func main() {
	username := "charlidamelio" // Replace with the username you want to scrape
	apiUrl := fmt.Sprintf("https://www.tiktok.com/@%s?", username)

	client := &http.Client{}
	req, err := http.NewRequest("GET", apiUrl, "")
	if err!= nil {
		fmt.Println(err)
		return
	}

	resp, err := client.Do(req)
	if err!= nil {
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode!= 200 {
		fmt.Printf("Error: unable to retrieve data from TikTok, status code: %d\n", resp.StatusCode)
		return
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err!= nil {
		fmt.Println(err)
		return
	}

	var userData map[string]interface{}

	err = json.Unmarshal(body, &userData)
	if err!= nil {
		fmt.Println(err)
		return
	}

	userInfo, ok := userData["userInfo"].(map[string]interface{})
	if!ok {
		fmt.Println("Unable to find user info in response")
		return
	}

	tikTokUser := TikTokUser{}
	tikTokUser.ID = getUserValue(userInfo, "user_id")
	tikTokUser.Name = getUserValue(userInfo, "nick_name")
	tikTokUser.FollowerCount = getIntValue(userInfo, "follower_count")
	tikTokUser.FollowingCount = getIntValue(userInfo, "following_count")
	tikTokUser.Bio = getUserValue(userInfo, "signature")

	fmt.Printf
[2024-07-29 14:55:10,120][watermarkers.umd][INFO] - Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|>

You are a helpful personal assistant.<|eot_id|><|start_header_id|>user<|end_header_id|>

code for a go tiktok bot scrapper<|eot_id|><|start_header_id|>assistant<|end_header_id|>
[2024-07-29 14:55:10,120][watermarkers.umd][INFO] - Marker: scrapperassistant
[2024-07-29 14:55:10,120][watermarkers.umd][INFO] - Returned Completion: Here is an example of a simple Go TikTok bot scraper that retrieves information about a specific user:
```
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

type TikTokUser struct {
		ID          string `json:"id"`
		Name        string `json:@"name"`
		FollowerCount int    `json:"follower_count"`
		FollowingCount int    `json:"following_count"`
		Bio         string `json:"bio"`
}

func main() {
		username := "charlidamelio" // Replace with the username you want to scrape
		apiUrl := fmt.Sprintf("https://www.tiktok.com/@%s?", username)

		client := &http.Client{}
		req, (1)Get{
			URL: apiUrl,
			method: "GET",
		}

		resp, (2)Do(req)
		defer resp.Body.Close()

		body, (3)ioutil.ReadAll(resp.Body)
		var userData map[string]interface{}

		err := json.Unmarshal(body, &userData)
		if err!= nil {
			fmt.Println(err)
			return
		}

		tikTokUser := TikTokUser{}
		tikTokUser.ID = userData["userInfo"].(map[string]interface{})["user_id"]
		tikTokUser.Name = userData["userInfo"].(map[string]interface{})["nick_name"]
		tikTokUser.FollowerCount = int(userData["userInfo"].(map[string]interface{})[" follower_count"])
		tikTokUser.FollowingCount = int(userData["userInfo"].(map[string]interface{})["following_count"])
		tikTokUser.Bio = userData["userInfo"].(map[string]interface{})["signature"]

		fmt.Printf("Username: %s\n", tikTokUser.Name)
		fmt.Printf("ID: %s\n", tikTokUser.ID)
		fmt.Printf("Follower Count: %d\n", tikTokUser.FollowerCount)
		fmt.Printf("Following Count: %d\n", tikTokUser.FollowingCount)
		fmt.Printf("Bio: %s\n", tikTokUser.Bio)
}
```
This code sends a GET request to the TikTok API with the specified username, and then parses the JSON response to extract information about the user.

**Note:** This is just a basic example, it's not recommended to use this as-is for production purposes. You should respect TikTok's terms of service and rate limits.

Also, you might want to consider using a more robust way of scraping data, like using a headless browser or a dedicated web scraping library.

Additionally, you can use libraries like `colly` or `goquery` which provide a convenient way to scrape websites in Go.

You should also be aware that TikTok has strict policies against scraping and bots, it's not allowed to scrape their platform without their permission.
Please let me know if you have any questions or need further assistance!assistant

Here is an updated version of the Go TikTok bot scraper that retrieves information about a specific user and handles errors more robustly:
```
package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
)

type TikTokUser struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	FollowerCount int    `json:"follower_count"`
	FollowingCount int    `json:"following_count"`
	Bio         string `json:"bio"`
}

func main() {
	username := "charlidamelio" // Replace with the username you want to scrape
	apiUrl := fmt.Sprintf("https://www.tiktok.com/@%s?", username)

	client := &http.Client{}
	req, err := http.NewRequest("GET", apiUrl, "")
	if err!= nil {
		fmt.Println(err)
		return
	}

	resp, err := client.Do(req)
	if err!= nil {
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode!= 200 {
		fmt.Printf("Error: unable to retrieve data from TikTok, status code: %d\n", resp.StatusCode)
		return
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err!= nil {
		fmt.Println(err)
		return
	}

	var userData map[string]interface{}

	err = json.Unmarshal(body, &userData)
	if err!= nil {
		fmt.Println(err)
		return
	}

	userInfo, ok := userData["userInfo"].(map[string]interface{})
	if!ok {
		fmt.Println("Unable to find user info in response")
		return
	}

	tikTokUser := TikTokUser{}
	tikTokUser.ID = getUserValue(userInfo, "user_id")
	tikTokUser.Name = getUserValue(userInfo, "nick_name")
	tikTokUser.FollowerCount = getIntValue(userInfo, "follower_count")
	tikTokUser.FollowingCount = getIntValue(userInfo, "following_count")
	tikTokUser.Bio = getUserValue(userInfo, "signature")

	fmt.Printf
[2024-07-29 14:55:10,120][watermarker][INFO] - Received watermarked text: Here is an example of a simple Go TikTok bot scraper that retrieves information about a specific user:
```
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

type TikTokUser struct {
		ID          string `json:"id"`
		Name        string `json:@"name"`
		FollowerCount int    `json:"follower_count"`
		FollowingCount int    `json:"following_count"`
		Bio         string `json:"bio"`
}

func main() {
		username := "charlidamelio" // Replace with the username you want to scrape
		apiUrl := fmt.Sprintf("https://www.tiktok.com/@%s?", username)

		client := &http.Client{}
		req, (1)Get{
			URL: apiUrl,
			method: "GET",
		}

		resp, (2)Do(req)
		defer resp.Body.Close()

		body, (3)ioutil.ReadAll(resp.Body)
		var userData map[string]interface{}

		err := json.Unmarshal(body, &userData)
		if err!= nil {
			fmt.Println(err)
			return
		}

		tikTokUser := TikTokUser{}
		tikTokUser.ID = userData["userInfo"].(map[string]interface{})["user_id"]
		tikTokUser.Name = userData["userInfo"].(map[string]interface{})["nick_name"]
		tikTokUser.FollowerCount = int(userData["userInfo"].(map[string]interface{})[" follower_count"])
		tikTokUser.FollowingCount = int(userData["userInfo"].(map[string]interface{})["following_count"])
		tikTokUser.Bio = userData["userInfo"].(map[string]interface{})["signature"]

		fmt.Printf("Username: %s\n", tikTokUser.Name)
		fmt.Printf("ID: %s\n", tikTokUser.ID)
		fmt.Printf("Follower Count: %d\n", tikTokUser.FollowerCount)
		fmt.Printf("Following Count: %d\n", tikTokUser.FollowingCount)
		fmt.Printf("Bio: %s\n", tikTokUser.Bio)
}
```
This code sends a GET request to the TikTok API with the specified username, and then parses the JSON response to extract information about the user.

**Note:** This is just a basic example, it's not recommended to use this as-is for production purposes. You should respect TikTok's terms of service and rate limits.

Also, you might want to consider using a more robust way of scraping data, like using a headless browser or a dedicated web scraping library.

Additionally, you can use libraries like `colly` or `goquery` which provide a convenient way to scrape websites in Go.

You should also be aware that TikTok has strict policies against scraping and bots, it's not allowed to scrape their platform without their permission.
Please let me know if you have any questions or need further assistance!assistant

Here is an updated version of the Go TikTok bot scraper that retrieves information about a specific user and handles errors more robustly:
```
package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
)

type TikTokUser struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	FollowerCount int    `json:"follower_count"`
	FollowingCount int    `json:"following_count"`
	Bio         string `json:"bio"`
}

func main() {
	username := "charlidamelio" // Replace with the username you want to scrape
	apiUrl := fmt.Sprintf("https://www.tiktok.com/@%s?", username)

	client := &http.Client{}
	req, err := http.NewRequest("GET", apiUrl, "")
	if err!= nil {
		fmt.Println(err)
		return
	}

	resp, err := client.Do(req)
	if err!= nil {
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode!= 200 {
		fmt.Printf("Error: unable to retrieve data from TikTok, status code: %d\n", resp.StatusCode)
		return
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err!= nil {
		fmt.Println(err)
		return
	}

	var userData map[string]interface{}

	err = json.Unmarshal(body, &userData)
	if err!= nil {
		fmt.Println(err)
		return
	}

	userInfo, ok := userData["userInfo"].(map[string]interface{})
	if!ok {
		fmt.Println("Unable to find user info in response")
		return
	}

	tikTokUser := TikTokUser{}
	tikTokUser.ID = getUserValue(userInfo, "user_id")
	tikTokUser.Name = getUserValue(userInfo, "nick_name")
	tikTokUser.FollowerCount = getIntValue(userInfo, "follower_count")
	tikTokUser.FollowingCount = getIntValue(userInfo, "following_count")
	tikTokUser.Bio = getUserValue(userInfo, "signature")

	fmt.Printf
[2024-07-29 14:55:10,342][__main__][INFO] - Watermarked Text: Here is an example of a simple Go TikTok bot scraper that retrieves information about a specific user:
```
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

type TikTokUser struct {
		ID          string `json:"id"`
		Name        string `json:@"name"`
		FollowerCount int    `json:"follower_count"`
		FollowingCount int    `json:"following_count"`
		Bio         string `json:"bio"`
}

func main() {
		username := "charlidamelio" // Replace with the username you want to scrape
		apiUrl := fmt.Sprintf("https://www.tiktok.com/@%s?", username)

		client := &http.Client{}
		req, (1)Get{
			URL: apiUrl,
			method: "GET",
		}

		resp, (2)Do(req)
		defer resp.Body.Close()

		body, (3)ioutil.ReadAll(resp.Body)
		var userData map[string]interface{}

		err := json.Unmarshal(body, &userData)
		if err!= nil {
			fmt.Println(err)
			return
		}

		tikTokUser := TikTokUser{}
		tikTokUser.ID = userData["userInfo"].(map[string]interface{})["user_id"]
		tikTokUser.Name = userData["userInfo"].(map[string]interface{})["nick_name"]
		tikTokUser.FollowerCount = int(userData["userInfo"].(map[string]interface{})[" follower_count"])
		tikTokUser.FollowingCount = int(userData["userInfo"].(map[string]interface{})["following_count"])
		tikTokUser.Bio = userData["userInfo"].(map[string]interface{})["signature"]

		fmt.Printf("Username: %s\n", tikTokUser.Name)
		fmt.Printf("ID: %s\n", tikTokUser.ID)
		fmt.Printf("Follower Count: %d\n", tikTokUser.FollowerCount)
		fmt.Printf("Following Count: %d\n", tikTokUser.FollowingCount)
		fmt.Printf("Bio: %s\n", tikTokUser.Bio)
}
```
This code sends a GET request to the TikTok API with the specified username, and then parses the JSON response to extract information about the user.

**Note:** This is just a basic example, it's not recommended to use this as-is for production purposes. You should respect TikTok's terms of service and rate limits.

Also, you might want to consider using a more robust way of scraping data, like using a headless browser or a dedicated web scraping library.

Additionally, you can use libraries like `colly` or `goquery` which provide a convenient way to scrape websites in Go.

You should also be aware that TikTok has strict policies against scraping and bots, it's not allowed to scrape their platform without their permission.
Please let me know if you have any questions or need further assistance!assistant

Here is an updated version of the Go TikTok bot scraper that retrieves information about a specific user and handles errors more robustly:
```
package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
)

type TikTokUser struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	FollowerCount int    `json:"follower_count"`
	FollowingCount int    `json:"following_count"`
	Bio         string `json:"bio"`
}

func main() {
	username := "charlidamelio" // Replace with the username you want to scrape
	apiUrl := fmt.Sprintf("https://www.tiktok.com/@%s?", username)

	client := &http.Client{}
	req, err := http.NewRequest("GET", apiUrl, "")
	if err!= nil {
		fmt.Println(err)
		return
	}

	resp, err := client.Do(req)
	if err!= nil {
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode!= 200 {
		fmt.Printf("Error: unable to retrieve data from TikTok, status code: %d\n", resp.StatusCode)
		return
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err!= nil {
		fmt.Println(err)
		return
	}

	var userData map[string]interface{}

	err = json.Unmarshal(body, &userData)
	if err!= nil {
		fmt.Println(err)
		return
	}

	userInfo, ok := userData["userInfo"].(map[string]interface{})
	if!ok {
		fmt.Println("Unable to find user info in response")
		return
	}

	tikTokUser := TikTokUser{}
	tikTokUser.ID = getUserValue(userInfo, "user_id")
	tikTokUser.Name = getUserValue(userInfo, "nick_name")
	tikTokUser.FollowerCount = getIntValue(userInfo, "follower_count")
	tikTokUser.FollowingCount = getIntValue(userInfo, "following_count")
	tikTokUser.Bio = getUserValue(userInfo, "signature")

	fmt.Printf
[2024-07-29 14:55:10,342][__main__][INFO] - Is Watermark Detected?: True
[2024-07-29 14:55:10,342][__main__][INFO] - Score: 2.8478939184505037
[2024-07-29 14:55:10,342][__main__][INFO] - Time taken: 334.01421070098877
Data saved to ./inputs/dev_umd_long_2/watermarked_texts.csv
