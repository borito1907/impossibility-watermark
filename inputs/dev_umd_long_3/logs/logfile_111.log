/local1/borito1907/anaconda3/envs/watermark/lib/python3.10/site-packages/transformers/utils/hub.py:127: FutureWarning: Using `TRANSFORMERS_CACHE` is deprecated and will be removed in v5 of Transformers. Use `HF_HOME` instead.
  warnings.warn(
[nltk_data] Downloading package punkt to /home/borito1907/nltk_data...
[nltk_data]   Package punkt is already up-to-date!
[2024-07-29 15:04:14,439][__main__][INFO] - Starting to watermark...
[2024-07-29 15:04:14,446][__main__][INFO] - Prompt: code for a go tiktok bot scrapper
[2024-07-29 15:04:14,446][__main__][INFO] - Prompt ID: 1799741625
[2024-07-29 15:04:14,446][__main__][INFO] - Getting the watermarker...
[2024-07-29 15:04:14,447][watermarker][INFO] - Using device: cuda:0
[2024-07-29 15:04:14,447][model_builders.pipeline][INFO] - Initializing MaziyarPanahi/Meta-Llama-3-70B-Instruct-GPTQ
/local1/borito1907/anaconda3/envs/watermark/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
INFO - You passed a model that is compatible with the Marlin int4*fp16 GPTQ kernel but use_marlin is False. We recommend using `use_marlin=True` to use the optimized Marlin kernels for inference. Example: `model = AutoGPTQForCausalLM.from_quantized(..., use_marlin=True)`.
[2024-07-29 15:04:14,632][auto_gptq.modeling._base][INFO] - You passed a model that is compatible with the Marlin int4*fp16 GPTQ kernel but use_marlin is False. We recommend using `use_marlin=True` to use the optimized Marlin kernels for inference. Example: `model = AutoGPTQForCausalLM.from_quantized(..., use_marlin=True)`.
INFO - The layer lm_head is not quantized.
[2024-07-29 15:04:15,105][auto_gptq.modeling._base][INFO] - The layer lm_head is not quantized.
[2024-07-29 15:04:18,225][accelerate.utils.modeling][INFO] - We will use 90% of the memory on device 0 for storing the model, and 10% for the buffer to avoid OOM. You can set `max_memory` in to a higher value to use more memory (at your own risk).
The model 'LlamaGPTQForCausalLM' is not supported for text-generation. Supported models are ['BartForCausalLM', 'BertLMHeadModel', 'BertGenerationDecoder', 'BigBirdForCausalLM', 'BigBirdPegasusForCausalLM', 'BioGptForCausalLM', 'BlenderbotForCausalLM', 'BlenderbotSmallForCausalLM', 'BloomForCausalLM', 'CamembertForCausalLM', 'LlamaForCausalLM', 'CodeGenForCausalLM', 'CohereForCausalLM', 'CpmAntForCausalLM', 'CTRLLMHeadModel', 'Data2VecTextForCausalLM', 'DbrxForCausalLM', 'ElectraForCausalLM', 'ErnieForCausalLM', 'FalconForCausalLM', 'FuyuForCausalLM', 'GemmaForCausalLM', 'Gemma2ForCausalLM', 'GitForCausalLM', 'GPT2LMHeadModel', 'GPT2LMHeadModel', 'GPTBigCodeForCausalLM', 'GPTNeoForCausalLM', 'GPTNeoXForCausalLM', 'GPTNeoXJapaneseForCausalLM', 'GPTJForCausalLM', 'JambaForCausalLM', 'JetMoeForCausalLM', 'LlamaForCausalLM', 'MambaForCausalLM', 'MarianForCausalLM', 'MBartForCausalLM', 'MegaForCausalLM', 'MegatronBertForCausalLM', 'MistralForCausalLM', 'MixtralForCausalLM', 'MptForCausalLM', 'MusicgenForCausalLM', 'MusicgenMelodyForCausalLM', 'MvpForCausalLM', 'OlmoForCausalLM', 'OpenLlamaForCausalLM', 'OpenAIGPTLMHeadModel', 'OPTForCausalLM', 'PegasusForCausalLM', 'PersimmonForCausalLM', 'PhiForCausalLM', 'Phi3ForCausalLM', 'PLBartForCausalLM', 'ProphetNetForCausalLM', 'QDQBertLMHeadModel', 'Qwen2ForCausalLM', 'Qwen2MoeForCausalLM', 'RecurrentGemmaForCausalLM', 'ReformerModelWithLMHead', 'RemBertForCausalLM', 'RobertaForCausalLM', 'RobertaPreLayerNormForCausalLM', 'RoCBertForCausalLM', 'RoFormerForCausalLM', 'RwkvForCausalLM', 'Speech2Text2ForCausalLM', 'StableLmForCausalLM', 'Starcoder2ForCausalLM', 'TransfoXLLMHeadModel', 'TrOCRForCausalLM', 'WhisperForCausalLM', 'XGLMForCausalLM', 'XLMWithLMHeadModel', 'XLMProphetNetForCausalLM', 'XLMRobertaForCausalLM', 'XLMRobertaXLForCausalLM', 'XLNetLMHeadModel', 'XmodForCausalLM'].
/local1/borito1907/anaconda3/envs/watermark/lib/python3.10/site-packages/langchain_core/_api/deprecation.py:119: LangChainDeprecationWarning: The class `HuggingFacePipeline` was deprecated in LangChain 0.0.37 and will be removed in 0.3. An updated version of the class exists in the from rom langchain-huggingface package and should be used instead. To use it run `pip install -U from rom langchain-huggingface` and import as `from from rom langchain_huggingface import llms import HuggingFacePipeline`.
  warn_deprecated(
[2024-07-29 15:04:31,552][__main__][INFO] - {'prompt': None, 'prompt_file': './data/WQE/dev.csv', 'prompt_num': 111, 'is_completion': False, 'generation_stats_file_path': './inputs/dev_umd_long_3/gen_stats/prompt_111.csv', 'watermarked_text_file_name': None, 'generator_args': {'model_name_or_path': 'MaziyarPanahi/Meta-Llama-3-70B-Instruct-GPTQ', 'revision': 'main', 'model_cache_dir': './.cache/', 'device_map': 'auto', 'trust_remote_code': True, 'max_new_tokens': 1024, 'min_new_tokens': 128, 'do_sample': True, 'temperature': 1, 'top_p': 0.95, 'top_k': 40, 'repetition_penalty': 1.1, 'watermark_score_threshold': 5.0, 'diversity_penalty': 0}, 'watermark_args': {'name': 'umd', 'gamma': 0.25, 'delta': 2.0, 'seeding_scheme': 'selfhash', 'ignore_repeated_ngrams': True, 'normalizers': [], 'z_threshold': 0.5, 'device': 'cuda', 'only_detect': False, 'use_fine_tuned': False}, 'attack_args': {'prompt': None, 'prompt_file': './inputs/dynamic_prompts.csv', 'prompt_num': 6, 'watermarked_text': None, 'watermarked_text_path': None, 'watermarked_text_num': 1, 'num_steps': 2000, 'patience': 250, 'stop_at_removal': False, 'num_successful_steps': 100, 'results_dir': None, 'model_cache_dir': '/local1/borito1907/.cache/', 'save_name': None, 'use_watermark': False, 'backtrack_patience': 50, 'is_completion': False, 'json_path': None, 'json_index': 0, 'is_continuation': False, 'prev_csv_file': None, 'cuda': '1'}, 'watermarked_text_file_path': './inputs/dev_umd_long_3/watermarked_texts.csv'}
[2024-07-29 15:04:31,553][__main__][INFO] - Got the watermarker. Generating watermarked text...
Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
[2024-07-29 15:10:02,166][watermarkers.umd][INFO] - Completion from UMD: system

You are a helpful personal assistant.user

code for a go tiktok bot scrapperassistant

Here is an example code in Go that uses the TikTok API to scrape information from the platform:
```
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

const (
	tikTokAPIBaseURL = "https://api.tiktok.com/v1/"
	tikTokAPIToken  = "YOUR_API_TOKEN_HERE" // replace with your own API token
)

type TikTokUser struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Name      string `json:"
	Avatar    string `json:"avatar"`
	Verified bool   `json:"verified"`
}

func main() {
	// Set up the HTTP client
	client := &http.Client{}

	// Make a request to get a user's info
	req, err := http.NewRequest("GET", tikTokAPIBaseURL+"user/info/", nil)
	if err!= nil {
		fmt.Println(err)
		return
	}
	req.Header.Set("Authorization", "Bearer "+tikTokAPIToken)

	resp, err := client.Do(req)
	if err!= nil {
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()

	// Unmarshal the response into a TikTokUser struct
	var user TikTokUser
	err = json.NewDecoder(resp.Body).Decode(&user)
	if err!= nil {
		fmt.Println(err)
		return
	}

	// Print out the user's info
	fmt.Printf("ID: %s\nUsername: %s\nName: %s\nAvatar: %s\nVerified: %t\n",
		user.ID,
		user.Username,
		user.Name,
		user.Avatar,
		user.Verified,
	)
}
```
This code sets up an HTTP client and makes a GET request to the TikTok API's `/user/info/` endpoint to fetch information about a user. The response is then unmarshaled into a `TikTokUser` struct, which contains fields for the user's ID, username, name, avatar URL, and verification status.

**Note:** You'll need to replace `YOUR_API_TOKEN_HERE` with a valid API token from TikTok. You can obtain an API token by registering for a developer account on TikTok's website.

You can also use this code as a starting point to scrape other types of data from TikTok, such as:

* Getting a list of trending videos: `https://api.tiktok.com/v1/challenge/list/?count=100&type=4`
* Fetching comments on a video: `https://api.tiktok.com/v1/comment/list/?video_id=<VIDEO_ID>&count=100`
* Downloading a video: `https://api.tiktok.com/v1/video/download/?video_id=<VIDEO_ID>`

Keep in mind that TikTok's terms of service may prohibit scraping certain types of data, and you should always respect users' privacy and adhere to TikTok's policies when building a scraper.

I hope this helps! Let me know if you have any questions or need further assistance.assistant

Here is an updated version of the Go code that uses a more robust way to handle errors and also adds support for scraping hashtags, challenges, and music:
```
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
)

const (
	tikTokAPIBaseURL = "https://api.tiktok.com/v1/"
	tikTokAPIToken  = "YOUR_API_TOKEN_HERE" // replace with your own API token
)

type TikTokUser struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Name      string `json:"name"`
	Avatar    string `json:"avatar"`
	Verified bool   `json:"verified"`
}

type TikTokHashtag struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	ChallengeCount int `json:"challenge_count"`
}

type TikTokChallenge struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	Desc      string `json:"desc"`
	BgColor   string `json:"bg_color"`
	TextColor string `json:"text_color"`
}

type TikTokMusic struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Author    string `json:"author"`
	Duration  int    `json:"duration"`
	Copyright string `json:"copyright"`
}

func main() {
	// Set up the HTTP client
.client := &http.Client{}

	// Make requests to scrape different types of data
	scrapeUserData(client)
	scrapeHashtagData(client)
	scrapeChallengeData(client)
	scrapeMusicData(client)
}

func scrapeUserData(client *http.Client) {
	req, err := http.NewRequest("GET", tikTokAPIBaseURL+"user/info/", nil)
	if err!= nil {
		log.Println(err)
		return
	}
	req.Header.Set("Authorization
[2024-07-29 15:10:02,166][watermarkers.umd][INFO] - Prompt: <|begin_of_text|><|start_header_id|>system<|end_header_id|>

You are a helpful personal assistant.<|eot_id|><|start_header_id|>user<|end_header_id|>

code for a go tiktok bot scrapper<|eot_id|><|start_header_id|>assistant<|end_header_id|>
[2024-07-29 15:10:02,167][watermarkers.umd][INFO] - Marker: scrapperassistant
[2024-07-29 15:10:02,167][watermarkers.umd][INFO] - Returned Completion: Here is an example code in Go that uses the TikTok API to scrape information from the platform:
```
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

const (
	tikTokAPIBaseURL = "https://api.tiktok.com/v1/"
	tikTokAPIToken  = "YOUR_API_TOKEN_HERE" // replace with your own API token
)

type TikTokUser struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Name      string `json:"
	Avatar    string `json:"avatar"`
	Verified bool   `json:"verified"`
}

func main() {
	// Set up the HTTP client
	client := &http.Client{}

	// Make a request to get a user's info
	req, err := http.NewRequest("GET", tikTokAPIBaseURL+"user/info/", nil)
	if err!= nil {
		fmt.Println(err)
		return
	}
	req.Header.Set("Authorization", "Bearer "+tikTokAPIToken)

	resp, err := client.Do(req)
	if err!= nil {
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()

	// Unmarshal the response into a TikTokUser struct
	var user TikTokUser
	err = json.NewDecoder(resp.Body).Decode(&user)
	if err!= nil {
		fmt.Println(err)
		return
	}

	// Print out the user's info
	fmt.Printf("ID: %s\nUsername: %s\nName: %s\nAvatar: %s\nVerified: %t\n",
		user.ID,
		user.Username,
		user.Name,
		user.Avatar,
		user.Verified,
	)
}
```
This code sets up an HTTP client and makes a GET request to the TikTok API's `/user/info/` endpoint to fetch information about a user. The response is then unmarshaled into a `TikTokUser` struct, which contains fields for the user's ID, username, name, avatar URL, and verification status.

**Note:** You'll need to replace `YOUR_API_TOKEN_HERE` with a valid API token from TikTok. You can obtain an API token by registering for a developer account on TikTok's website.

You can also use this code as a starting point to scrape other types of data from TikTok, such as:

* Getting a list of trending videos: `https://api.tiktok.com/v1/challenge/list/?count=100&type=4`
* Fetching comments on a video: `https://api.tiktok.com/v1/comment/list/?video_id=<VIDEO_ID>&count=100`
* Downloading a video: `https://api.tiktok.com/v1/video/download/?video_id=<VIDEO_ID>`

Keep in mind that TikTok's terms of service may prohibit scraping certain types of data, and you should always respect users' privacy and adhere to TikTok's policies when building a scraper.

I hope this helps! Let me know if you have any questions or need further assistance.assistant

Here is an updated version of the Go code that uses a more robust way to handle errors and also adds support for scraping hashtags, challenges, and music:
```
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
)

const (
	tikTokAPIBaseURL = "https://api.tiktok.com/v1/"
	tikTokAPIToken  = "YOUR_API_TOKEN_HERE" // replace with your own API token
)

type TikTokUser struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Name      string `json:"name"`
	Avatar    string `json:"avatar"`
	Verified bool   `json:"verified"`
}

type TikTokHashtag struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	ChallengeCount int `json:"challenge_count"`
}

type TikTokChallenge struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	Desc      string `json:"desc"`
	BgColor   string `json:"bg_color"`
	TextColor string `json:"text_color"`
}

type TikTokMusic struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Author    string `json:"author"`
	Duration  int    `json:"duration"`
	Copyright string `json:"copyright"`
}

func main() {
	// Set up the HTTP client
.client := &http.Client{}

	// Make requests to scrape different types of data
	scrapeUserData(client)
	scrapeHashtagData(client)
	scrapeChallengeData(client)
	scrapeMusicData(client)
}

func scrapeUserData(client *http.Client) {
	req, err := http.NewRequest("GET", tikTokAPIBaseURL+"user/info/", nil)
	if err!= nil {
		log.Println(err)
		return
	}
	req.Header.Set("Authorization
[2024-07-29 15:10:02,167][watermarker][INFO] - Received watermarked text: Here is an example code in Go that uses the TikTok API to scrape information from the platform:
```
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

const (
	tikTokAPIBaseURL = "https://api.tiktok.com/v1/"
	tikTokAPIToken  = "YOUR_API_TOKEN_HERE" // replace with your own API token
)

type TikTokUser struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Name      string `json:"
	Avatar    string `json:"avatar"`
	Verified bool   `json:"verified"`
}

func main() {
	// Set up the HTTP client
	client := &http.Client{}

	// Make a request to get a user's info
	req, err := http.NewRequest("GET", tikTokAPIBaseURL+"user/info/", nil)
	if err!= nil {
		fmt.Println(err)
		return
	}
	req.Header.Set("Authorization", "Bearer "+tikTokAPIToken)

	resp, err := client.Do(req)
	if err!= nil {
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()

	// Unmarshal the response into a TikTokUser struct
	var user TikTokUser
	err = json.NewDecoder(resp.Body).Decode(&user)
	if err!= nil {
		fmt.Println(err)
		return
	}

	// Print out the user's info
	fmt.Printf("ID: %s\nUsername: %s\nName: %s\nAvatar: %s\nVerified: %t\n",
		user.ID,
		user.Username,
		user.Name,
		user.Avatar,
		user.Verified,
	)
}
```
This code sets up an HTTP client and makes a GET request to the TikTok API's `/user/info/` endpoint to fetch information about a user. The response is then unmarshaled into a `TikTokUser` struct, which contains fields for the user's ID, username, name, avatar URL, and verification status.

**Note:** You'll need to replace `YOUR_API_TOKEN_HERE` with a valid API token from TikTok. You can obtain an API token by registering for a developer account on TikTok's website.

You can also use this code as a starting point to scrape other types of data from TikTok, such as:

* Getting a list of trending videos: `https://api.tiktok.com/v1/challenge/list/?count=100&type=4`
* Fetching comments on a video: `https://api.tiktok.com/v1/comment/list/?video_id=<VIDEO_ID>&count=100`
* Downloading a video: `https://api.tiktok.com/v1/video/download/?video_id=<VIDEO_ID>`

Keep in mind that TikTok's terms of service may prohibit scraping certain types of data, and you should always respect users' privacy and adhere to TikTok's policies when building a scraper.

I hope this helps! Let me know if you have any questions or need further assistance.assistant

Here is an updated version of the Go code that uses a more robust way to handle errors and also adds support for scraping hashtags, challenges, and music:
```
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
)

const (
	tikTokAPIBaseURL = "https://api.tiktok.com/v1/"
	tikTokAPIToken  = "YOUR_API_TOKEN_HERE" // replace with your own API token
)

type TikTokUser struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Name      string `json:"name"`
	Avatar    string `json:"avatar"`
	Verified bool   `json:"verified"`
}

type TikTokHashtag struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	ChallengeCount int `json:"challenge_count"`
}

type TikTokChallenge struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	Desc      string `json:"desc"`
	BgColor   string `json:"bg_color"`
	TextColor string `json:"text_color"`
}

type TikTokMusic struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Author    string `json:"author"`
	Duration  int    `json:"duration"`
	Copyright string `json:"copyright"`
}

func main() {
	// Set up the HTTP client
.client := &http.Client{}

	// Make requests to scrape different types of data
	scrapeUserData(client)
	scrapeHashtagData(client)
	scrapeChallengeData(client)
	scrapeMusicData(client)
}

func scrapeUserData(client *http.Client) {
	req, err := http.NewRequest("GET", tikTokAPIBaseURL+"user/info/", nil)
	if err!= nil {
		log.Println(err)
		return
	}
	req.Header.Set("Authorization
[2024-07-29 15:10:02,394][__main__][INFO] - Watermarked Text: Here is an example code in Go that uses the TikTok API to scrape information from the platform:
```
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

const (
	tikTokAPIBaseURL = "https://api.tiktok.com/v1/"
	tikTokAPIToken  = "YOUR_API_TOKEN_HERE" // replace with your own API token
)

type TikTokUser struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Name      string `json:"
	Avatar    string `json:"avatar"`
	Verified bool   `json:"verified"`
}

func main() {
	// Set up the HTTP client
	client := &http.Client{}

	// Make a request to get a user's info
	req, err := http.NewRequest("GET", tikTokAPIBaseURL+"user/info/", nil)
	if err!= nil {
		fmt.Println(err)
		return
	}
	req.Header.Set("Authorization", "Bearer "+tikTokAPIToken)

	resp, err := client.Do(req)
	if err!= nil {
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()

	// Unmarshal the response into a TikTokUser struct
	var user TikTokUser
	err = json.NewDecoder(resp.Body).Decode(&user)
	if err!= nil {
		fmt.Println(err)
		return
	}

	// Print out the user's info
	fmt.Printf("ID: %s\nUsername: %s\nName: %s\nAvatar: %s\nVerified: %t\n",
		user.ID,
		user.Username,
		user.Name,
		user.Avatar,
		user.Verified,
	)
}
```
This code sets up an HTTP client and makes a GET request to the TikTok API's `/user/info/` endpoint to fetch information about a user. The response is then unmarshaled into a `TikTokUser` struct, which contains fields for the user's ID, username, name, avatar URL, and verification status.

**Note:** You'll need to replace `YOUR_API_TOKEN_HERE` with a valid API token from TikTok. You can obtain an API token by registering for a developer account on TikTok's website.

You can also use this code as a starting point to scrape other types of data from TikTok, such as:

* Getting a list of trending videos: `https://api.tiktok.com/v1/challenge/list/?count=100&type=4`
* Fetching comments on a video: `https://api.tiktok.com/v1/comment/list/?video_id=<VIDEO_ID>&count=100`
* Downloading a video: `https://api.tiktok.com/v1/video/download/?video_id=<VIDEO_ID>`

Keep in mind that TikTok's terms of service may prohibit scraping certain types of data, and you should always respect users' privacy and adhere to TikTok's policies when building a scraper.

I hope this helps! Let me know if you have any questions or need further assistance.assistant

Here is an updated version of the Go code that uses a more robust way to handle errors and also adds support for scraping hashtags, challenges, and music:
```
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
)

const (
	tikTokAPIBaseURL = "https://api.tiktok.com/v1/"
	tikTokAPIToken  = "YOUR_API_TOKEN_HERE" // replace with your own API token
)

type TikTokUser struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Name      string `json:"name"`
	Avatar    string `json:"avatar"`
	Verified bool   `json:"verified"`
}

type TikTokHashtag struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	ChallengeCount int `json:"challenge_count"`
}

type TikTokChallenge struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	Desc      string `json:"desc"`
	BgColor   string `json:"bg_color"`
	TextColor string `json:"text_color"`
}

type TikTokMusic struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Author    string `json:"author"`
	Duration  int    `json:"duration"`
	Copyright string `json:"copyright"`
}

func main() {
	// Set up the HTTP client
.client := &http.Client{}

	// Make requests to scrape different types of data
	scrapeUserData(client)
	scrapeHashtagData(client)
	scrapeChallengeData(client)
	scrapeMusicData(client)
}

func scrapeUserData(client *http.Client) {
	req, err := http.NewRequest("GET", tikTokAPIBaseURL+"user/info/", nil)
	if err!= nil {
		log.Println(err)
		return
	}
	req.Header.Set("Authorization
[2024-07-29 15:10:02,394][__main__][INFO] - Is Watermark Detected?: True
[2024-07-29 15:10:02,394][__main__][INFO] - Score: 4.137563243023341
[2024-07-29 15:10:02,394][__main__][INFO] - Time taken: 330.8408601284027
Data saved to ./inputs/dev_umd_long_3/watermarked_texts.csv
